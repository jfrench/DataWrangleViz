}
if(!require(future.apply, quietly = TRUE)) {
install.packages("future.apply",
repos = "https://cran.rstudio.com/")
}
year <- 1950
if (year >= 1981 & year <= 1996) {
generation <- "millennial"
} else if (year >= 1997 & year <= 2012) {
generation <- "generation z"
} else if (year >= 2013 & year <= 2025) {
generation <- "gen alpha"
} else {
generation <- "other"
}
generation
determine_generation <- function(year) {
if (year >= 1981 & year <= 1996) {
generation <- "millennial"
} else if (year >= 1997 & year <= 2012) {
generation <- "generation z"
} else if (year >= 2013 & year <= 2025) {
generation <- "gen alpha"
} else {
generation <- "other"
}
return(generation)
}
determine_generation(1985)
sound <- function(animal) {
switch(animal,
"dog" = "ruff",
"cat" = "meow",
"horse" = "neigh",
"frog" = "ribbit",
"cow" = "moo",
"duck" = "quack",
"rooster" = "keekarikee",
"coyote" = "yipp",
"donkey" = "hee-haw",
"we don't know what sound this animal makes")
}
sound("dog")
sound("duck")
sound("goose")
for (i in 1:3) {
message("The current iterator value is ", i)
}
for (animal in c("dog", "cat", "coyote")) {
current_sound <- sound(animal)
message("The ", animal, " makes the sound ", current_sound, ".")
}
#| echo: false
#| eval: true
#| output: true
set.seed(1)
qqnorm(rnorm(100), main = "data match theoretical distribution")
abline(0, 1)
#| echo: false
#| eval: true
#| output: true
set.seed(2)
qqnorm(rexp(100), main = "data don't match theoretical distribution")
abline(0, 1)
# make example reproducible
set.seed(33)
# create 2x2 plotting grid
par(mfrow = c(2, 2))
# draw normal samples, create q-q plot
for (i in 1:4) {
# draw 20 values from a N(0, 1) population
s <- rnorm(20)
# draw q-q plot for sample using normal distribution
qqnorm(s)
# draw reference line
abline(0, 1)
}
#| include: false
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(),
'microbenchmark',
'pbapply',
'parallel',
'future',
'future.apply'
), 'packages_control_iteration_apply.bib')
if(!require(microbenchmark, quietly = TRUE)) {
install.packages("microbenchmark",
repos = "https://cran.rstudio.com/")
}
if(!require(pbapply, quietly = TRUE)) {
install.packages("pbapply",
repos = "https://cran.rstudio.com/")
}
if(!require(future.apply, quietly = TRUE)) {
install.packages("future.apply",
repos = "https://cran.rstudio.com/")
}
year <- 1950
if (year >= 1981 & year <= 1996) {
generation <- "millennial"
} else if (year >= 1997 & year <= 2012) {
generation <- "generation z"
} else if (year >= 2013 & year <= 2025) {
generation <- "gen alpha"
} else {
generation <- "other"
}
generation
determine_generation <- function(year) {
if (year >= 1981 & year <= 1996) {
generation <- "millennial"
} else if (year >= 1997 & year <= 2012) {
generation <- "generation z"
} else if (year >= 2013 & year <= 2025) {
generation <- "gen alpha"
} else {
generation <- "other"
}
return(generation)
}
determine_generation(1985)
sound <- function(animal) {
switch(animal,
"dog" = "ruff",
"cat" = "meow",
"horse" = "neigh",
"frog" = "ribbit",
"cow" = "moo",
"duck" = "quack",
"rooster" = "keekarikee",
"coyote" = "yipp",
"donkey" = "hee-haw",
"we don't know what sound this animal makes")
}
sound("dog")
sound("duck")
sound("goose")
for (i in 1:3) {
message("The current iterator value is ", i)
}
for (animal in c("dog", "cat", "coyote")) {
current_sound <- sound(animal)
message("The ", animal, " makes the sound ", current_sound, ".")
}
#| echo: false
#| eval: true
#| output: true
set.seed(1)
qqnorm(rnorm(100), main = "data match theoretical distribution")
abline(0, 1)
#| echo: false
#| eval: true
#| output: true
set.seed(2)
qqnorm(rexp(100), main = "data don't match theoretical distribution")
abline(0, 1)
# make example reproducible
set.seed(33)
# create 2x2 plotting grid
par(mfrow = c(2, 2))
# draw normal samples, create q-q plot
for (i in 1:4) {
# draw 20 values from a N(0, 1) population
s <- rnorm(20)
# draw q-q plot for sample using normal distribution
qqnorm(s)
# draw reference line
abline(0, 1)
}
library(parallel)
cl <- makeCluster(getOption("cl.cores", 2))
sleep_iterator <- function(i) {
Sys.sleep(1) # sleep for 1 second
return(NULL) # return NULL
}
system.time(pblapply(1:6, FUN = sleep_iterator, cl = cl))
?usethis::git_vaccinate
usethis::git_sitrep()
30 * 25
set.seed(314)
A <- matrix(rnorm(100), ncol = 2)
B <- matrix(rnorm(100), ncol = 2)
all.equal(t(A) %*% B, crossprod(A, B))
all.equal(A %*% t(B), tcrossprod(A, B))
library(microbenchmark)
t1 <- microbenchmark::microbenchmark(t(A) %*% B, crossprod(A, B))
plot(t1)
t2 <- microbenchmark(A %*% t(B), tcrossprod(A, B))
plot(t2)
set.seed(1999)
A <- matrix(rnorm(1000), ncol = 2)
B <- matrix(rnorm(100), nrow = 2)
C <- rnorm(50)
t3 <- microbenchmark((A %*% B) %*% C,
A %*% (B %*% C))
plot(t3, las = 2, cex.axis = 0.5)
cumsum_loop <- function(x) {
# create vector of results
results <- numeric(length(x))
for (i in 1:length(x)) {
if (i == 1) {
results[i] <- x[i]
} else {
results[i] <- results[i - 1] + x[i]
}
}
return(results)
}
cumsum_loop(c(1, 2, 4))
cumsum(c(1, 2, 4))
# attach microbenchmark
library(microbenchmark)
# draw 1000 values from a N(0, 1) distribution
x <- rnorm(1000)
# compute the cumulative sum 100 times using both approaches
cumsum_timings <- microbenchmark(cumsum_loop(x), cumsum(x))
# plot timing results
plot(cumsum_timings)
#| label: tbl-apply
#| tbl-cap: "A summary of the various `*apply` functions available in R."
#| echo: false
adf <- data.frame(name = c("`apply`", "`lapply`", "`sapply`", "`vapply`", "`tapply`", "`mapply`"),
description = c("Applies a function to the margins of a data frame, matrix, or array.", "Applies a function to each element of a list.", "A version of `lapply` that attempts to simplify the results to a vector, matrix, or array.", "A safer version of `sapply` that returns a pre-specified type of return value.", "Applies a function to a vector or data frame based on the levels of a categorical variable", "A multivariate version of `sapply`."))
knitr::kable(adf)
mat <- cbind(1:5, 6:10)
mat
apply(X = mat, MARGIN = 1, FUN = mean)
apply(mat, 2, mean)
apply(mat, 2, quantile, prob = 0.8)
A <- array(1:24, dim = c(3, 2, 4))
print(A)
apply(A, 1, mean)
mean(A[1,,])
apply(A, 3, sum)
sum(A[,,1])
apply(A, 1:2, mean)
mean(A[1, 1, ])
simple_list <- list(1:10, 11:20)
simple_list
lapply(simple_list, mean)
sapply(simple_list, mean)
simple_list2 <- list(1:3, 4:7)
simple_list2
add2 <- function(x) {
x + 2
}
add2(2:3)
sapply(simple_list, add2)
sapply(simple_list2, add2)
l1 <- list(seq.int(1, 4), seq.int(4, 7))
l1
l2 <- list(seq(1.5, 4.5, by = 1), seq(4.5, 7.5, by = 1))
l2
vapply(l1, max, FUN.VALUE = integer(1))
#| error: true
vapply(l2, max, FUN.VALUE = integer(1))
vapply(l2, max, FUN.VALUE = double(1))
bootstrap_ci <- function(x, conf.level = 0.95, B = 1000) {
# determine alpha
alpha <- 1 - conf.level
# compute sample mean of B bootstrap samples
bstats <- lapply(1:B, FUN = function(i) {
# draw bootstrap sample
boot_sample <- sample(x, size = length(x), replace = TRUE)
# compute sample mean of bootstrap sample
mean(boot_sample)
})
# convert list to vector
bstats <- unlist(bstats)
# compute desired quantiles for bootstrap ci
quantile(bstats, prob = c(alpha/2, 1-alpha/2))
}
set.seed(43)
x <- c(3.318, 4.940, 5.516, 2.958, 6.098, 6.858, -0.539, 2.544, 4.091, 1.884)
bootstrap_ci(x)
tapply(X = chickwts$weight, INDEX = chickwts$feed, FUN = mean)
tapply(X = chickwts$weight, INDEX = chickwts$feed, FUN = summary)
sleep_iterator <- function(i) {
Sys.sleep(1) # sleep for 1 second
return(NULL) # return NULL
}
system.time(lapply(1:6, sleep_iterator))
library(parallel)
cl <- makeCluster(getOption("cl.cores", 2))
system.time(parLapply(cl, 1:6, sleep_iterator))
library(future.apply)
plan(multisession, workers = 2)
system.time(future_lapply(1:6, FUN = sleep_iterator))
library(pbapply)
system.time(pblapply(1:6, FUN = sleep_iterator, cl = cl))
bootstrap_ci_cl <- function(x, conf.level = 0.95, B = 1000, cl = NULL) {
# determine alpha
alpha <- 1 - conf.level
# compute sample mean of B bootstrap samples
bstats <- pbsapply::pblapply(1:B, FUN = function(i) {
# draw bootstrap sample
boot_sample <- sample(x, size = length(x), replace = TRUE)
# compute sample mean of bootstrap sample
mean(boot_sample)
}, cl = cl)
# convert list to vector
bstats <- unlist(bstats)
# compute desired quantiles for bootstrap ci
quantile(bstats, prob = c(alpha/2, 1-alpha/2))
}
system.time(bootstrap_ci_cl, cl = NULL)
system.time(bootstrap_ci_cl(x, cl = NULL))
bootstrap_ci_cl <- function(x, conf.level = 0.95, B = 1000, cl = NULL) {
# determine alpha
alpha <- 1 - conf.level
# compute sample mean of B bootstrap samples
bstats <- pbapply::pblapply(1:B, FUN = function(i) {
# draw bootstrap sample
boot_sample <- sample(x, size = length(x), replace = TRUE)
# compute sample mean of bootstrap sample
mean(boot_sample)
}, cl = cl)
# convert list to vector
bstats <- unlist(bstats)
# compute desired quantiles for bootstrap ci
quantile(bstats, prob = c(alpha/2, 1-alpha/2))
}
system.time(bootstrap_ci_cl(x, cl = NULL))
system.time(bootstrap_ci_cl, cl = cl)
system.time(bootstrap_ci_cl(x, cl = cl))
system.time(bootstrap_ci_cl(x, cl = cl))
bootstrap_ci_cl <- function(x, conf.level = 0.95, B = 1000, cl = NULL) {
# determine alpha
alpha <- 1 - conf.level
# compute sample mean of B bootstrap samples
bstats <- pbapply::pblapply(1:B, FUN = function(i, x) {
# draw bootstrap sample
boot_sample <- sample(x, size = length(x), replace = TRUE)
# compute sample mean of bootstrap sample
mean(boot_sample)
}, x = x, cl = cl)
# convert list to vector
bstats <- unlist(bstats)
# compute desired quantiles for bootstrap ci
quantile(bstats, prob = c(alpha/2, 1-alpha/2))
}
system.time(bootstrap_ci_cl(x, cl = NULL))
system.time(bootstrap_ci_cl(x, cl = cl))
bstats <- pbapply::pblapply(1:B, FUN = function(i, x) {
# draw bootstrap sample
boot_sample <- sample(x, size = length(x), replace = TRUE)
# compute sample mean of bootstrap sample
mean(boot_sample)
}, x = x, cl = cl)
?pblapply
bootstrap_ci_cl <- function(x, conf.level = 0.95, B = 1000, cl = NULL) {
# determine alpha
alpha <- 1 - conf.level
# compute sample mean of B bootstrap samples
bstats <- pbapply::pblapply(1:B, FUN = function(i, xvec) {
# draw bootstrap sample
boot_sample <- sample(x, size = length(x), replace = TRUE)
# compute sample mean of bootstrap sample
mean(boot_sample)
}, xvec = x, cl = cl)
# convert list to vector
bstats <- unlist(bstats)
# compute desired quantiles for bootstrap ci
quantile(bstats, prob = c(alpha/2, 1-alpha/2))
}
system.time(bootstrap_ci_cl(x, cl = NULL))
system.time(bootstrap_ci_cl(x, cl = cl))
cl
system.time(bootstrap_ci_cl(x, B = 10000, cl = NULL))
system.time(bootstrap_ci_cl(x, B = 10000, cl = cl))
?proc.time
?append
set.seed(314)
A <- matrix(rnorm(100), ncol = 2)
B <- matrix(rnorm(100), ncol = 2)
all.equal(t(A) %*% B, crossprod(A, B))
all.equal(A %*% t(B), tcrossprod(A, B))
library(microbenchmark)
t1 <- microbenchmark::microbenchmark(t(A) %*% B, crossprod(A, B))
plot(t1)
t2 <- microbenchmark(A %*% t(B), tcrossprod(A, B))
plot(t2)
set.seed(1999)
A <- matrix(rnorm(1000), ncol = 2)
B <- matrix(rnorm(100), nrow = 2)
C <- rnorm(50)
t3 <- microbenchmark((A %*% B) %*% C,
A %*% (B %*% C))
plot(t3, las = 2, cex.axis = 0.5)
cumsum_loop <- function(x) {
# create vector of results
results <- numeric(length(x))
for (i in 1:length(x)) {
if (i == 1) {
results[i] <- x[i]
} else {
results[i] <- results[i - 1] + x[i]
}
}
return(results)
}
cumsum_loop(c(1, 2, 4))
cumsum(c(1, 2, 4))
# attach microbenchmark
library(microbenchmark)
# draw 1000 values from a N(0, 1) distribution
x <- rnorm(1000)
# compute the cumulative sum 100 times using both approaches
cumsum_timings <- microbenchmark(cumsum_loop(x), cumsum(x))
# plot timing results
plot(cumsum_timings)
#| label: tbl-apply
#| tbl-cap: "A summary of the various `*apply` functions available in R."
#| echo: false
adf <- data.frame(name = c("`apply`", "`lapply`", "`sapply`", "`vapply`", "`tapply`", "`mapply`"),
description = c("Applies a function to the margins of a data frame, matrix, or array.", "Applies a function to each element of a list.", "A version of `lapply` that attempts to simplify the results to a vector, matrix, or array.", "A safer version of `sapply` that returns a pre-specified type of return value.", "Applies a function to a vector or data frame based on the levels of a categorical variable", "A multivariate version of `sapply`."))
knitr::kable(adf)
mat <- cbind(1:5, 6:10)
mat
apply(X = mat, MARGIN = 1, FUN = mean)
apply(mat, 2, mean)
apply(mat, 2, quantile, prob = 0.8)
A <- array(1:24, dim = c(3, 2, 4))
print(A)
apply(A, 1, mean)
mean(A[1,,])
apply(A, 3, sum)
sum(A[,,1])
apply(A, 1:2, mean)
mean(A[1, 1, ])
simple_list <- list(1:10, 11:20)
simple_list
lapply(simple_list, mean)
sapply(simple_list, mean)
simple_list2 <- list(1:3, 4:7)
simple_list2
add2 <- function(x) {
x + 2
}
add2(2:3)
sapply(simple_list, add2)
sapply(simple_list2, add2)
l1 <- list(seq.int(1, 4), seq.int(4, 7))
l1
l2 <- list(seq(1.5, 4.5, by = 1), seq(4.5, 7.5, by = 1))
l2
vapply(l1, max, FUN.VALUE = integer(1))
#| error: true
vapply(l2, max, FUN.VALUE = integer(1))
vapply(l2, max, FUN.VALUE = double(1))
bootstrap_ci <- function(x, conf.level = 0.95, B = 1000) {
# determine alpha
alpha <- 1 - conf.level
# compute sample mean of B bootstrap samples
bstats <- lapply(1:B, FUN = function(i) {
# draw bootstrap sample
boot_sample <- sample(x, size = length(x), replace = TRUE)
# compute sample mean of bootstrap sample
mean(boot_sample)
})
# convert list to vector
bstats <- unlist(bstats)
# compute desired quantiles for bootstrap ci
quantile(bstats, prob = c(alpha/2, 1-alpha/2))
}
set.seed(43)
x <- c(3.318, 4.940, 5.516, 2.958, 6.098, 6.858, -0.539, 2.544, 4.091, 1.884)
bootstrap_ci(x)
tapply(X = chickwts$weight, INDEX = chickwts$feed, FUN = mean)
tapply(X = chickwts$weight, INDEX = chickwts$feed, FUN = summary)
sleep_iterator <- function(i) {
Sys.sleep(1) # sleep for 1 second
return(NULL) # return NULL
}
system.time(lapply(1:6, sleep_iterator))
library(parallel)
cl <- makeCluster(getOption("cl.cores", 2))
system.time(parLapply(cl, 1:6, sleep_iterator))
library(future.apply)
plan(multisession, workers = 2)
system.time(future_lapply(1:6, FUN = sleep_iterator))
system.time(pblapply(1:6, FUN = sleep_iterator, cl = cl))
bootstrap_ci_cl <- function(x, conf.level = 0.95, B = 1000, cl = NULL) {
# determine alpha
alpha <- 1 - conf.level
# compute sample mean of B bootstrap samples
bstats <- pbapply::pblapply(1:B, FUN = function(i, xvec) {
# draw bootstrap sample
boot_sample <- sample(x, size = length(x), replace = TRUE)
# compute sample mean of bootstrap sample
mean(boot_sample)
}, xvec = x, cl = cl)
# convert list to vector
bstats <- unlist(bstats)
# compute desired quantiles for bootstrap ci
quantile(bstats, prob = c(alpha/2, 1-alpha/2))
}
system.time(bootstrap_ci_cl(x, B = 100000, cl = NULL))
system.time(bootstrap_ci_cl(x, B = 100000, cl = cl))
parallel::detectCores()
getOption("cl.cores")
getOption("cl.cores", 2)
cl <- makeCluster(12)
cl <- parallel::makeCluster(12)
1-exp(-01)
exp(1) - 1
exp(1)/(exp(1) - 1)
1/(1-exp(-1))
0.79 + 0.89 + (4.29 - .7) + 1.33 + 1 + 0.79 + 2 + 1.25 + (1.99 * 2 - 0.55) + 2 * 1.49 + 4 + 1.49 + 1.49 + 5
4.99 + 4.99 + 2.99 + 3.49
