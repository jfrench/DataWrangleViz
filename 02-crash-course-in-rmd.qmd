---
title: "Joshua French"
date: "`r format(Sys.time(), '%Y-%m-%d')`"
format:
  html:
    number-sections: true
self-contained: true
title-block-banner: true
bibliography:
- crash-rmd.bib
- packages_crashrmd.bib
---

```{r}
#| include: false
knitr::write_bib(c("bookdown", "rmarkdown", "flexdashboard", "shiny", "blogdown"), file = "packages_crashrmd.bib")
```

# Crash Course in R Markdown

This document is intended to help you quickly learn how to generate reproducible data analysis and results using R Markdown.

An accompanying YouTube playlist that walks through this document is available by following the link [here](https://www.youtube.com/playlist?list=PLkrJrLs7xfbXJ0F9yc-n8PzvoFv4qmM-N). I have also included direct, relevant video links throughout the file (e.g., immediately after the the relevant heading). An html version of this document can be downloaded to your current working direction (run `getwd()` in the Console to see where this is) by running the following command:

```{r}
#| eval: false
download.file("https://raw.githubusercontent.com/jfrench/DataWrangleViz/master/02-crash-course-in-rmd.html",
              "02-crash-course-in-rmd.html")
```

Note that there may be small differences between this document (which is easy to update) and the videos (which are not). When there is a discrepancy, trust this document more than the video.

## What is R Markdown? (Video: [YouTube](https://youtu.be/mcTB7h9lpCg), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=ecc1e3da-ef27-42d9-bcb4-af0301719c07))

R Markdown is a tool for dynamic, reproducible creation of data-centric documents that include text, code, the results of executed code.

-   R Markdown was created by R Studio (<https://www.rstudio.com>) in 2014 (or at least that's the oldest discussion I can find).
-   R Markdown is a variant of Markdown, which was created by John Gruber (creator of Daring Fireball, <https://daringfireball.net/>) and Aaron Swartz (co-creator of Reddit, [https://www.reddit.com/](https://www.reddit.com)) as a lightweight markup language for creating formatted text using a plain-text editor.
-   In general, a markdown language is a language that is written in plain-text but is rendered differently based on "markups" in the text.
-   R Markdown has some capabilities similar to Jupyter notebooks (<https://jupyter.org/>) .

R Markdown is a great way to:

-   Create a data analysis notebook that documents how and why you did analysis a certain way.
-   Share your work with others in a variety of formats.
-   Make your work reproducible.

R Markdown is a very useful tool for the data scientist.

R Studio provides R Markdown (and other) cheatsheets at <https://rstudio.com/resources/cheatsheets/>

### Your turn

The easiest way to create a new R Markdown file in R Studio is File → New File → R Markdown. Do this on your computer to see what is produced.

## What is Quarto? (Video: [YouTube](https://youtu.be/e9qCS8ODs4o), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=7bc5015f-627c-46f7-89bc-af55016accbe))

<img src="./figures/quarto_logo.jpg" height="200"/>

The Quarto website (<https://quarto.org/docs/faq/>) states:

> Quarto is an open-source scientific and technical publishing system built on Pandoc. You can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books and more.

More helpfully, Quarto is the spiritual successor to R Markdown that was built from the ground up to be compatible with:

-   R
-   Python
-   Julia
-   Observable JavaScript.

Quarto's development is sponsored by Posit (<https://posit.co/>), which was formally known as R Studio.

<img src="./figures/posit_logo.svg" height="100"/>

You can use Quarto to create:

-   Technical documents
-   Books
-   Blogs
-   Websites.

If you have successfully produced material using R Markdown, then you should feel at home producing materials using Quarto (and may want to shift future content production to Quarto documents).

The R Markdown ecosystem was very mature when the decision to develop Quarto was made, so Quarto is designed to better integrate the various document types, options, and customizations available in R Markdown. Essentially, Quarto attempts to take the strengths of R Markdown while correcting some of its weaknesses.

Quarto documents can be edited in:

-   R Studio (my favorite)
-   VS Code
-   JupyterLab
-   Any text editor.

R Studio provides the most feature-rich environment for creating Quarto documents.

To open a new Quarto document in R Studio:

1.  From the File menu click File → New File → Quarto Document.
2.  Make the appropriate changes.
3.  Click the Create button.

Click the Render button, <img src="./figures/render_button.png" style="height:2em;"/>, to render the default Quarto document.

In contrast to R Markdown documents, Quarto documents end in `.qmd`.

We will focus our discussion on R Markdown for now. But most of the discussion will apply directly to creating a document using Quarto.

## What's in an R Markdown or Quarto document?

An R Markdown or Quarto document have three components:

1.  An optional YAML header.
2.  Formatted text.
3.  **Chunks** of computer code.

Since the YAML header is optional, we'll talk about it last.

## Formatting text in R Markdown or Quarto

### Commenting code (Video: [YouTube](https://youtu.be/LxIVp6vw6cM), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=daf64b81-e313-4f45-9d05-af030171b257))

In R Scripts and the R Console, the `#` symbol begins the start of a comment.

In R Markdown or Quarto files, a comment is created by placing `<!--` and `-->` to the left and right, respectively, of the text you want to comment.

e.g.,

```         
<!-- comment text -->
```

would comment the text "comment text".

The easiest way to comment text in R Markdown or Quarto documents is to highlight the text and then press `Ctrl/Cmd + Shift + c`.

### Your turn

Practice commenting some text in R Markdown or Quarto.

### Headings and sections (Video: [YouTube](https://youtu.be/K-CCEx2tbHI), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=3a2bf67b-4cc0-48f3-966c-af030171bdac))

Headings and sections of different levels are created with `#`.

-   `#` indicates the first level
-   `##` being the second level
-   etc.

The words after the `#` will be larger than the regular text.

### Font styles and effects

We can change the font style by using the appropriate symbols before and/or after the text to be styled. We list several styles below.

-   *Italic text*: `*text*` or `_text_`.
-   **Bold text**: `**text**` or `__text__` (two underscores on each side)
-   `Typewriter (code) text`: `` `text` ``
-   Endash (--), emdash (---): `--` and `---`.
-   ^superscript^ and ~subscript~: `^superscript^` and `~subscript~`
-   ~~strikethrough~~: `~~strikethrough~~`
-   Escaping special characters \*, \_, \$, \\, `` ` ``: `\*`, `\_`, `\$`, `\\`, ``` `` ` `` ```
-   Footnote[^1]: `Footnote^[This is a footnote]`

[^1]: This is a footnote

Mathematial equations in R Markdown or Quarto documents are rendered using LaTeX (which is [pronounced](https://www.latex-project.org/about/) "Lah-tech" or "Lay-tech").

-   LaTeX is the most popular tool for typesetting mathematical documents for publication in academia.
-   Mathematical equations in R Markdown or Quarto documents are started and ended using \$ or \$\$, as they would in a standard LaTeX document.

E.g., Typing "The regression coefficient \$\\beta\$" will produce "The regression coefficient $\beta$".

### Your turn

1.  Create a new R Script (`Ctrl/Cmd + Shift + n`) or use the file menu to create a new R Markdown document with the title "Bad jokes".
2.  Replace the file contents with the code below:

```         
---
title: "Bad jokes"
output: html_notebook
---

# First level

## Second level

### Third level

This document is intended to help you see the effect of markup on a rendered document.
  
*This is italic text*

**This is bold text**

`This looks like computer code`

What's the difference between endash--endash and emdash---emdash?

How can I add a superscript to this? Like this: this^superscript^?

That's a joke if you didn't get the ~subtext~. 

Wow, two bad jokes in a row. I'd like to strike ~~that~~ from my memory.

I wish I could \*escape\* these bad jokes.

But I guess this will just be an unpleasant footnote^[unpleasant footnote].
```

3.  Save the file (`Ctrl/Cmd + s`) with the name "bad_jokes.Rmd".
4.  Click the Preview button and view the results.

## Numbered/ordered and unordered lists (Video: [YouTube](https://youtu.be/ME80PeaMBF4), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=a6fadf2d-e224-40c5-9929-af030171c214))

### Numbered/ordered lists

We can easily create a numbered list with multiple levels.

-   We can customize the numbering used for each level by simply using the numbering scheme we want to use in the list.

In the example below, we use:

-   1., 2., 3., etc. for the first level.
-   a., b., c., etc., for the second level.
-   i., ii., iii., etc. for the third level.

A new level is indicated by using two additional tabs before indicting the numbering scheme used for that level.

In the example below, there are two tabs before a. and b. to indicate a second level and four tabs before i. to indicate a third level.

```         
A numbered list with subnumbering.

1. Item 1
    a. Sub-item 1 # two tabs, not one
    b. Sub-item 2
        i. Sub-sub-item 1 # four tabs, not two
2. Item 2
    a. Sub-item 1
```

When text code above is rendered, it produces the numbered list below.

1.  Item 1
    a.  Sub-item 1
    b.  Sub-item 2
        i.  Sub-sub-item 1
2.  Item 2
    a.  Sub-item 1

Note: There must be an empty line between any text and the first number in a list.

### Unordered lists

We can create unordered lists with sublevels using `*` or `-`.

-   New levels are indicated with two extra tabs more than the previous level.

Here is an example of Markdown code we can use to create an unnumbered list with various levels.

```         
* Item 1
    * Sub-item 1
    * Sub-item 2
      * Sub-sub-item 1
* Item 2
    * Sub-item 1
```

When rendered, the code above produces the unordered list below.

-   Item 1
    -   Sub-item 1
    -   Sub-item 2
        -   Sub-sub-item 1
-   Item 2
    -   Sub-item 1

Notes:

-   There must be a line between any text and the first `*`.
-   You can use `+` or `-` instead of `*` when creating unordered lists with the same result.

### Your turn

Create an example of a numbered list with 4 levels and an unordered list with 3 levels.

## Code chunks (Video: [YouTube](https://youtu.be/_jVqqTGfmB0), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=9fced554-c5d1-4f35-998f-af030171c4e6))

Chunks of code can be added in an R Markdown by placing the relevant code between ```` ```{r} ```` and ```` ``` ````. e.g.,

````         
```{r, label = chunk_name}`r ''`
1 + 1
```
````

You can generate a code chunk template using `Ctrl/Cmd + Alt + i`.

The `chunk_name` is optional but allows you give give chunks names labels that you can refer back to. This is useful for complicated documents and reports. (See Verbatim Code Chunks <https://bookdown.org/yihui/rmarkdown-cookbook/verbatim-code-chunks.html> to learn how to render the above code.)

Note: each label should be unique within the document. I don't recommend adding chunk labels unless you actually need them, otherwise you are likely to reuse a chunk label and make a headache for yourself!

### Chunk options (Video: [YouTube](https://youtu.be/Fq7H_qt2K4g), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=e1789eba-64a7-4abb-a035-af030171c861))

This section only applies to R Markdown documents. Similar behavior is available in Quarto, but we don't discuss here.

Code chunks have many options that can be used to customize the code. We will cover many important ones below. I will specify the default option in parentheses, (), after the option. So this is what will be used by default if you don't specify anything.

Yuhui Xie, creator of **knitr**, provides a complete list (<https://yihui.org/knitr/options/>) of chunk options on his website (<https://yihui.org/>).

### Code evaluation

-   `eval`: (`TRUE`) A logical value indicating whether the chunk should be evaluated in the Console.
    -   You can also evaluate **selected lines** if you provide a numeric vector. e.g., `eval = 1:3` would evaluate lines 1 through 3.

### Text output

-   `echo`: (`TRUE`). A logical value indicating whether the source code should be displayed.
    -   You can also echo **selected lines** if you provide a numeric vector. e.g., `echo = 1:3` would echolines 1 through 3
-   `results`: (`'markup'`). Determines hwo the results are displayed.
    -   Other options are `'asis'`, `'hold'`, `'hide'`.
-   `collapse`: (`FALSE`). A logical value indicating whether the source and output should be collapsed into a single block.
-   `include`: (`TRUE`) A logical value indicating whether to include the chunk output.
    -   Set to `FALSE` when you want something to run but not be shown.

Other options: `warning`, `error`, `messages` (`TRUE`) determine whether warnings, errors, and messages will be displayed, respectively.

### Code styling

-   `highlight`: (`TRUE`) A logical value indicating whether the source code syntax should be highlighted with different colors.
-   `comment`: (`##`) The text that will be shown prior to evaluated code in the output block.
    -   Use `##` or `#>` to make the code blocks easier to copy and paste into the Console. `#>` is closer to what the Console output actually looks like.
-   `tidy`: (`FALSE`) A logical value indicating whether the source code be automatically reformatted.
-   `tidy.opts`: (`NULL`) A list of options that can be used to customize the `tidy` option above.
    -   e.g., `tidy.opts = list(width.cutoff = 60)` controls the length of the code and tries to cut the code lines at 60 characters.

### Plots

-   `fig.show`: (`'asis'`). Instructions for displaying plots.
    -   `'asis'`: Show plots in the order and places they would be if executed in the Console.
    -   `'hold'`: Output all plots at the end of the chunk.
    -   `'hide'`: Hide all plots.
    -   `'animate'`: Combine and animate the plots
-   `fig.align`: (`'default'`). A character vector specifying how to align the figures.
    -   Allowable values are: `'default'`, `'left'`, `'right'`, and `'center'`.
-   `fig.width`, `fig.height`: (7). A numeric value indicating the width and height of the result figures.
-   `fig.cap`: (`NULL`). A caption for the figure.

### Your turn (Video: [YouTube](https://youtu.be/teiwbKIfUnY), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=01e3d2df-dded-410b-a84c-af030171cdc3))

Copy and paste the code at <https://raw.githubusercontent.com/jfrench/DataWrangleViz/master/rmd-chunks-viz.Rmd> into an R Markdown document and then Knit the file to see visual examples of the options described above.

### Some general options not discussed

-   Caching: This has to do with saving previous code that has been evaluated. This is important for documents with lots of code that is time consuming to run.
-   Animation: You can add plot animations if you have the FFMpeg program installed (<https://ffmpeg.org/>.)

### Inline code

You can run code in the middle of text using something like `` `r knitr::inline_expr("mean(1:3)")` ``.

For example, `` `r knitr::inline_expr("1 + 1")` `` will produce `r 1 + 1`.

### Tables

By default, R will print tables (like data frames) exactly like you would see them in the Console output.

For example:

````         
```{r}`r ''`
head(cars)
```
````

```{r}
head(cars)
```

The formatting can be improved with the `kable` function in the **knitr** package.

````         
```{r}`r ''`
knitr::kable(cars[1:6,], caption = "Kable table")
```
````

```{r}
knitr::kable(cars[1:6,], caption = "Kable table")
```

**Markdown tables** (Video: [YouTube](https://youtu.be/Rp1EGDY3ZkQ), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=e8cd6ee8-dae3-439d-935a-af030171d795))

Tables can be directly created in Markdown using extended syntax (<https://www.markdownguide.org/extended-syntax/>). These are most useful for small tables that require very specific formatting and don't have many rows or columns.

Basic structure:

-   The first two rows of a Markdown table provide the table's header (the column names and alignment.)
-   The remaining rows provide the rest of the table's data.

Additional details:

-   The pipe (`|`) is used to separate the table columns and column names in the first row.

-   The pipe and three (or more) hyphens (`---`) between pipes are used in the second row to create a line between the column names and the values in the table.

-   The colon (`:`) can be used in the second row to align the columns.

    -   `:---` produces a left-aligned column.
    -   `---:` produces a right-aligned column.
    -   `:---:` produces a center-aligned column.

-   You can use more than three hyphens or spaces to align the columns visually.

-   The remaining values in the table are placed between pipes and can be formatted similar to other text.

-   Make sure each row begins and ends with a pipe.

A simple example is provided below.

If we include the following code in our R Markdown or Quarto document:

```         
| Coefficient | Estimate | Est. Standard Error |
| :---------- | -------: | :---:               |
| (Intercept) | 3.2      | 1.6                 |
| $\beta_1$   | *1.5*    | **2.7**             | 
| X2          | 9.4      | ~~0.6~~             |
```

then the following output will be rendered:

| Coefficient | Estimate | Est. Standard Error |
|:------------|---------:|:-------------------:|
| (Intercept) |      3.2 |         1.6         |
| $\beta_1$   |    *1.5* |       **2.7**       |
| X2          |      9.4 |       ~~0.6~~       |

Notice the alignment and formatting of the text based on the code above.

## YAML header basics (Video: [YouTube](https://youtu.be/YlcK9Ef31KE), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=1bf320a4-6313-4324-95af-af03017227a5))

The YAML (Yet Another Markdown Language) header controls many aspects of the R Markdown document.

We only discuss some of the basic details of YAML headers below. If you do need to know about the YAML header in detail, then you probably need a more advanced introduction to R Markdown!

The YAML header is provided at the top of an R Markdown document between sets of 3 dashes:

```         
---
some info here ...
---
```

The YAML header allows you to specify:

-   `title`: The title of the document, which is displayed in font larger than the section headings or main text.
-   `author`: The author of the document. This is displayed just below the title.
-   `date`: The date. You can use something like "2022-09-01" to add a static date or

```{r}
#| eval: false
"`r format(Sys.time(), '%Y-%m-%d')`"
```

to add a date that changes dynamically based on when you knit the document.

-   `output`: The output type produced when knitting the document.
-   `bibliography`: Link to bibliography files to enable citations.

Here's a YAML header you could use for an R Markdown document like this:

```{r}
#| eval: false
---
title: "Joshua French"
date: "`r format(Sys.time(), '%Y-%m-%d')`"
output: 
  bookdown::html_notebook2:
    number_sections: true
  bookdown::html_document2:
    number_sections: true
bibliography:
- crash-rmd.bib
- packages_crashrmd.bib
---
```

Looking over the YAML, you may notice:

-   I've replaced the title with my name (for formatting reasons).
-   I automatically update the date based on when the document is compiled.
-   I have have two different document output types.
    -   I indicated additional options (whether the sections are numbed) with an indented newline below the document type.
-   I'm using two different bibliography files.

It is easy to make mistakes in your YAML that will cause problems with your knitted document.

-   Simply use the defaults until you have need for something else.
-   Refer to the **bookdown** documentation at <https://bookdown.org/yihui/bookdown/> for many additional aspects of the YAML header.

Some additional things you can control through the YAML header:

-   Whether code-folding is allowed in html documents.
-   Whether sections are numbered.
-   Customizing code block formatting ( <https://bookdown.org/yihui/rmarkdown-cookbook/chunk-styling.html>).
-   Whether to add a table of contents to your document.
-   Using a theme to style your document.
-   The default text style.
-   The default figure size.
-   There are many more options.

To learn more about the customizable options for a particular output type, you can look through the relevant documentation for the output type. E.g., by running `?rmarkdown::html_document` or `?bookdown::html_notebook2` in the Console.

### R Markdown output types (Video: [YouTube](https://youtu.be/n7rVTJWy82c), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=762e307f-7f1b-44b3-ae3a-af03017f7070))

One of the incredible features of R Markdown is that you can easily produce multiple output types from a single document. Simply include multiple output types in your YAML header and then choose the desired output with a click of the down arrow next to the <img src="./figures/knit_button.png" style="height:2em;"/> button. Some of the main document output types are:

-   `pdf_document`: Excellent for distributing a static (unchanging) document. Also great for submitting homework solutions to your instructor!
-   `html_document`: Excellent for sharing interactive files. Can be viewed in a web browser.
-   `html_notebook`: The excellent "R notebook".
    -   It's like an `html_document` but the source code can be downloaded by toggling the "Code" button in the upper right hand corner of the file.
    -   Great to share with collaborators because they can update the document, add analysis, etc.
    -   Make sure to "Run All Code" using `Ctrl/Cmd + Alt + r` prior to "Preview" the document or the code chunk output will not be included.
-   `word_document`: If for some reason you need Microsoft Word editing capabilities.

Adding the following code in the YAML header will give you the option produce a pdf document, an html notebook, an html document, and a Microsoft Word document with a quick choice from the down arrow of the Knit button! If you simply click the Knit button, then the top output type will be produced.

```         
output:
  pdf_document: default
  html_notebook: default
  html_document:
    df_print: paged
  word_document: default
```

If you click the down arrow next to the Knit button, you might see something like this:

```{r, echo = FALSE, fig.cap = "A screen capture of document output types available when clicking the down arrow next to the Knit button."}
knitr::include_graphics("./figures/knit_choices.png")
```

Additional output document formats are available by default through the **rmarkdown** package [@R-rmarkdown]:

-   `context_document`
-   `github_document`
-   `latex_document`
-   `md_document`
-   `odt_document`
-   `rtf_document`

The **rmarkdown** package also provides several presentation outputs:

-   `beamer_presentation`
-   `ioslides_presentation`
-   `powerpoint_presentation`
-   `slidy_presentation`

For presentations, you generally:

-   Use `#` to start a new slide with a title.
-   Use `***` to start a new slide without a title.
-   Use `##` for a second level header.
-   Add text, graphics, and math equations like a typical R Markdown document.

If you are in need of automatically-linked cross-references (referring to figures, tables, equations, sections, etc.), then the **bookdown** package [@bookdown2022] package provides the document types that extend the ones mentioned above:

-   `bookdown::pdf_document2`
-   `bookdown::html_document2`
-   `bookdown::html_notebook2`
-   `bookdown::word_document2`

You can work with these documents in the same way as the standard R Markdown documents, but with additional cross-referencing capabilities. You may need to enable section numbering for the cross-references to work properly.

Several R packages or functions provide additional output types:

-   Shiny apps: the **shiny** package [@R-shiny] allows you to create shiny apps, which are interactive web apps.
-   Websites: `rmarkdown::render_site()` function can be used to create websites.
-   Books: The **bookdown** package [@R-bookdown] provides several book formats.
-   Blogs: The **blogdown** package [@R-blogdown] can be used to create books.
-   Dashboards: The **flexdashboard** package [@R-flexdashboard] can be used to create interactive dashboards.
-   html_widgets: various packages

### Your turn

In this example, we see the difference between an html document and an html notebook.

-   Execute the following command in the Console:

```{r, eval = FALSE}
download.file("https://raw.githubusercontent.com/jfrench/DataWrangleViz/master/02-crash-course-in-rmd.nb.html", 
destfile = "02-crash-course-in-rmd.nb.html")
```

-   Find the downloaded file on your computer and open it.
-   Toggle the "Code" button in the right hand corner of the file to download the original source code.

## Citations (Video: [YouTube](https://youtu.be/D6uzySgINHw), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=ae115723-00d4-47f7-a187-af080129dcf2)) {#sec-citations}

A good data scientist will appropriately acknowledge sources of information or resources they use to produce their work. This acknowledgment is known as a citation and the act of acknowledgment is "citing" someone's work. Citations can be added to an R Markdown document through the YAML header.

To cite something in R Markdown, you must have a file containing your references. Your references can be stored in one of two ways [@bookdown2016]:

-   A `bib` file using BibTeX or BibLaTeX format.
-   A `csl` file using the Citation Style Language (<https://citationstyles.org/>).

We will briefly discuss citing references in the BibTeX format.

BibTeX is a reference manager (like Zotero or Mendeley).

-   References are stored in separate `.bib` file, making it easier to separate the presentation of citations from their storage.
-   BibTeX is widely used to manage references when creating documents in LaTeX, but it can also be used in other settings (such as R Markdown documents).
-   The BibTeX website (<https://www.bibtex.com>) is an excellent source of information about using BibTeX.

The key ingredients to a BibTeX reference are the:

1.  *entry* type
2.  *citekey*
3.  additional entry *fields*.

The *entry* type indicates the type of document you are citing. There are currently 14 entry types. The most common entry types are:

-   `article`: journal or magazine articles.
-   `book`: an physical or online book.
-   `manual`: technical documentation, like for an R package.
-   `misc`: when none of the other entry types apply. This is commonly used for websites.

The *citekey* is a unique identifier for a specific reference.

-   Make the citekey a short but descriptive identifier of the reference.
-   E.g., `rotk` might refer to *Return of the King*, the 3rd novel in J.R.R. Tolkien's Lord of the Rings trilogy.

The *fields* are specific pieces of information needed for each entry type. Different entry types require different information. Nearly all entry types require the following fields:

-   `title`: the title of the reference item.
-   `author`: the person, persons, or organization that created the reference item.
-   `year`: the year the reference item was produced.

Refer to (<https://www.bibtex.com/g/bibtex-format/>) for additional fields.

In what follows, let's assume we have BibTeX references stored in a file `crash-rmd.bib` (that's literally the `.bib` file I'm using for this document). `crash-rmd.bib` contains two citation entries, which are produced exactly below:

```         
@Manual{bookdown2022,
    title = {bookdown: Authoring Books and Technical Documents with R Markdown},
    author = {Yihui Xie},
    year = {2022},
    note = {R package version 0.27},
    url = {https://github.com/rstudio/bookdown},
}

@Book{sp2013,
  author = {Roger S. Bivand and Edzer Pebesma and Virgilio Gomez-Rubio},
  title = {Applied spatial data analysis with {R}, Second edition},
  year = {2013},
  publisher = {Springer, NY},
      url = {https://asdar-book.org/},
}
```

You can also run the following command in the R Console to download the file into your current working directory:

```         
download.file("https://raw.githubusercontent.com/jfrench/DataWrangleViz/master/crash-rmd.bib",
              destfile = "crash-rmd.bib")
```

The first entry is the technical manual for the **bookdown** package. The citekey for that reference is `bookdown2022`. The second entry is a for a book related to doing spatial statistics in R. The citekey for that book is `sp2013`.

The `.bib` file should be in the same directory as the document citing the entries. In your YAML header, you must add the following line to the YAML header of your document:

```         
bibliography: filename.bib
```

where `filename` is replaced by the name of your `.bib` file.

-   In our case, this is `crash-rmd.bib`.

You can use multiple `.bib` files in your document by adding the following lines to your YAML header:

```         
bibliography:
- crash-rmd.bib
- packages_crashrmd.bib
```

To cite a reference from a `.bib` file:

-   Use `@citekey` to cite the reference as a proper noun, e.g., Astley (1987).
-   Use `[@citekey]` to cite the reference parenthetically, e.g., (Astley 1987).
-   Multiple citations should be separated by semicolons.
-   Add additional information about a reference with commas, e.g., `[@smith2021, Ch. 7]` might produce (Smith 2021, Ch. 7).

R Markdown will automatically add your references at the end of your document.

We can use the code below to add references to the technical manual for **bookdown** and the book introducing **bookdown**. We use the pattern `code`: result produced.

-   `@bookdown2022`: @bookdown2022
-   `[@sp2013]`: [@sp2013]
-   `[@bookdown2022; @sp2013]`: [@bookdown2022; @sp2013]
-   `[@bookdown2022, Section 2.8]` : [@bookdown2022, Section 2.8]

It is possible to change citation styles, use multiple `.bib` files in one document, have hyperlinks to your references. etc. We do not discuss those options, but refer you to <https://bookdown.org/yihui/bookdown/citations.html>.

## Cross-references in R Markdown (Video: [Cross-references video](https://youtu.be/tVNBegYx2Oc), [Panopto](https://ucdenver.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=cf0621e0-79d0-420c-b38e-af0801711b7e)) {#sec-cross-references}

A cross-reference is a reference to another part of a document. It is common to refer to specific:

-   Sections of your document
-   Figures
-   Tables
-   Mathematical equations.

To use cross-references in an R Markdown document:

1.  You must use one of the **bookdown** document formats (e.g., `bookdown::html_document2`, `bookdown::html_notebook2`, `bookdown::pdf_document2`, etc.)
2.  Create a figure, table, equation, section, etc. with a unique label.
3.  Add a caption to your figure or table.
4.  Use the syntax `\@ref(label)` to reference the object, where `label` is replaced with the appropriate unique label.

### Figures

To cross-reference a figure in R Markdown:

1.  Include a unique chunk label immediately after the `r` when you start your code chunk.
2.  Use the `fig.cap` argument of the code chunk to add a figure caption.
3.  Generate a single plot. Technically, you can do more than one, but that will make cross-reference more complex.
4.  Use the syntax `\@ref(fig:chunk-label)` in your document (with `chunk-label` replaced by the actual label) to cross-reference the desired figure. You must include the `fig:` part of the reference.

Additionally, set `echo = FALSE` in the code chunk argument if you don't want to see the code used to produce the graphic.

Suppose we include the following code chunk in our document:

<img src="./figures/figchunk.png"/>

followed by:

```         
Consider the standard normal density in Figure \@ref(fig:stdnorm-density).
```

The result is:

```{r}
#| label: fig-density
#| echo: false
#| fig-cap: "The density of a standard normal distribution."
x <- seq(-4, 4, len = 1000)
plot(x, dnorm(x), type = "l")
```

Consider the standard normal density in @fig-density.

### Tables

To cross-reference a table in R Markdown:

1.  Include a unique chunk label immediately after the `r` when you start your code chunk.
2.  Use `knitr::kable` to print a single table.
3.  Use the `caption` argument of `knitr::kable` to add a table caption.
4.  Use the syntax `\@ref(tab:chunk-label)` in your document (with `chunk-label` replaced by the actual label) to cross-reference the desired table. You must include the `tab:` part of the reference.

Set `echo = FALSE` in the code chunk argument if you don't want to see the code used to produce the table.

Suppose you added the following text to your document:

<img src="./figures/tblchunk.png"/>

followed by:

```         
Table \@ref(tab:simple-table) provides information about the observations in our data set.
```

This will produce the following output:

```{r}
#| echo: false
#| label: tbl-simple-table2
#| tbl-cap: Simple table. 
out_df <- data.frame(observation = 1:3,
                     height = c(69, 72, 70),
                     name = LETTERS[1:3])
knitr::kable(out_df)
```

@tbl-simple-table2 provides information about the observations in our data set.

### Equations

We provide only the briefest introduction to using LaTeX to typeset mathematics.

A "display style equation" is an equation that is set off from the rest of the text. The symbols are often larger, the equation is often centered, AND you can cross-reference a display style equation.

A display style equation is created between `\[ ... \]` or `$$ ... $$`. You add the commands you want to typeset in the `...`.

To cross-reference a display equation, add `(\#eq:label)` where `label` is replaced by a unique label.

-   When referencing equations, we MUST add `eq:` before the label. We do not do that for figures or tables.

Now let's discuss cross-referencing a single equation in R Markdown. 

Consider adding the following text in your document:

```         
$$
Y = \beta_0 + \beta_1 X + \epsilon. (\#eq:slr-model)
$$
```

followed by:

```         
Note the simple linear regression model in Equation \@ref(eq:slr-model).
```

This will produce the following result:

$$
Y = \beta_0 + \beta_1 X + \epsilon. 
$$ {#eq-slr-model}

Note the simple linear regression model in @eq-slr-model.

### Sections

Cross-referencing a section is the simplest type of cross-reference.

After the section you want to label, add `{#section-label}`, where `section-label` is a short, unique identifier. E.g., in the document above, we have the following text:

```         
## Citations {#sec-citations}
```

The text above adds the label `sec-citations` label to the subsection "Citations". 

To cross-reference a labeled section in R Markdown, we use the syntax `\@ref(sec-label)`, where `sec-label` is the unique section label. 

To cite the "Citation" section, we would write `\@ref(sec-citations)`.

If we add the following text in our document:

```         
We discuss citations in Section \@ref(sec-citations).
```

we get:

We discuss citations in @sec-citations.

## Cross-references in Quarto {#sec-cross-references-quarto}

Cross-referencing capabilities are built into Quarto and do not require using a special document format.

### Figures

To cross-reference a figure in Quarto:

1.  Create an R code chunk.
2.  At the top of the chunk, add a figure label to the graphic using the following syntax: `#| label: fig-myfigure`. You must start the label with `fig-` for cross-referencing to work.
3. Underneath the label information, add a figure caption using `#| fig-cap "A caption."` You must include a caption for cross-referencing to work.
4. After the caption information, use `#| echo: false` if you don't want to display the code needed to create the graphic.
5.  Generate a single plot.
6.  Use the syntax `@fig-myfigure` in your document to cross-reference the desired figure. 

Suppose we include the following code chunk in our document:

```{{r}}
#| label: fig-scatter
#| fig-cap: "A nice caption."
#| echo: false
set.seed(1)
x <- 0:20
y <- 1 + 2 * x + rnorm(21)
plot(x, y)
```

We follow that with the text:

```
I want to reference @fig-scatter.
```

This would produce the following result.

```{r}
#| label: fig-scatter
#| fig-cap: "A nice caption."
#| echo: false
set.seed(1)
x <- 0:20
y <- 1 + 2 * x + rnorm(21)
plot(x, y)
```

I want to reference @fig-scatter.

### Tables

To cross-reference a Table in Quarto:

1.  Create an R code chunk.
2.  At the top of the chunk, add a table label to the graphic using the following syntax: `#| label: tbl-mytable`. Note: You must include `tbl-` in your label for cross-referencing to work.
3. Underneath the label information, add a table caption using `#| tbl-cap A table caption.` Note: You must include a caption or the cross-referencing will not work.
4. After the caption information, use `#| echo: false` if you don't want to display the code needed to create the table.
5.  Generate a single table through `knitr::kable`.
6.  Use the syntax `@tbl-mytable` in your document to cross-reference the desired table. 

Consider adding the following code chunk to your Quarto document:

```{{r}}
#| label: tbl-mtcars
#| tbl-cap: Data extracted from a 1974 edition of Motor Trend US magazine.
#| echo: false

knitr::kable(mtcars[1:3, ])
```

Follow this by:

```
We refer to the vehicle data in @tbl-mtcars.
```

This will produce the following result:

```{r}
#| label: tbl-cars
#| tbl-cap: Data extracted from a 1974 edition of Motor Trend US magazine.
#| echo: false

knitr::kable(mtcars[1:3,])
```

We refer to the vehicle data in @tbl-cars.

### Equations

Cross-referencing equations in Quarto is only slightly different from R Markdown. The most notable difference is that we assign a label to an equation using `{#eq-mylabel}` AFTER the end of the equation.

Consider adding the code below to your document.

```         
$$
Y = \beta_0 + \beta_1 X + \beta_2 X^2 + \epsilon. 
$$ {#eq-quadratic-model}
```

We then add the following text to cross-reference this equation. 

```         
Note the quadratic regression model in Equation @eq-quadratic.
```

This will produce the following result:

$$
Y = \beta_0 + \beta_1 X + +\beta_2 X^2 + \epsilon. 
$$ {#eq-quadratic}

Note the quadratic regression model in @eq-quadratic.

### Sections

We cross-reference a labeled section in Quarto using the syntax `@sec-label`.

- This is most useful when the document has numbered sections, though it technically works either way.

To create a Quarto document with numbered sections you must specify the appropriate `format` options. The YAML code below specifies numbered sections for an html document.

```{r}
#| eval: false
format:
  html:
    number-sections: true
```

We have labeled the Cross-references in R Markdown section with `{#sec-cross-references}`. A section label must start with `sec-` or cross-referencing will not work in Quarto. 

If we add the following text in our document:

```         
We discuss cross-references in Section @sec-cross-references.
```

we get:

We discuss cross-references in  @sec-cross-references.

## References {.unnumbered}
